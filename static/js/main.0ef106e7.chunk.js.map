{"version":3,"sources":["utils/check-grid/index.ts","utils/create-full-grid/index.ts","utils/fill-grid/index.ts","utils/identify-square/index.ts","utils/is-in/col/index.ts","utils/is-in/row/index.ts","utils/is-in/square/index.ts","utils/shuffle/index.ts","utils/solve-grid/index.ts","core/app/index.tsx","core/service-worker/index.ts","index.tsx"],"names":["checkGrid","grid","i","j","createFullGrid","fillGrid","numbers","row","col","Math","floor","shuffle","value","isInRow","isInCol","square","identifySquare","isInSquare","identifyWorkingSquare","x","push","includes","array","length","random","solveGrid","App","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ef106e7.chunk.js","sourcesContent":["import { GRID } from \"../../typings\";\r\n\r\n/**\r\n * A function to check if the grid is full\r\n * @param grid A 9X9 array consisting of values from 0-9\r\n */\r\nfunction checkGrid(grid: GRID): boolean {\r\n  for (let i = 0; i < 9; i++)\r\n    for (let j = 0; j < 9; j++) if (grid[i][j] === 0) return false;\r\n\r\n  return true;\r\n}\r\n\r\nexport default checkGrid;\r\n","import { GRID } from \"../../typings\";\r\nimport { fillGrid } from \"..\";\r\n\r\nfunction createFullGrid(): GRID {\r\n  const grid: GRID = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n  ];\r\n\r\n  fillGrid(grid);\r\n\r\n  return grid;\r\n}\r\n\r\nexport default createFullGrid;\r\n","import { GRID, NUMBERS } from \"typings\";\r\nimport {\r\n  checkGrid,\r\n  identifySquare,\r\n  shuffle,\r\n  isInCol,\r\n  isInRow,\r\n  isInSquare\r\n} from \"utils\";\r\n\r\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n/**\r\n * A backtracking/recusrive function to check all possible combinations of numbers until a solution is found\r\n * @param grid 9X9 Sudoku Grid\r\n */\r\nfunction fillGrid(grid: GRID) {\r\n  let row = 0;\r\n  let col = 0;\r\n\r\n  for (let i = 0; i < 81; i++) {\r\n    row = Math.floor(i / 9);\r\n    col = i % 9;\r\n\r\n    if (grid[row][col] === 0) {\r\n      shuffle(numbers);\r\n\r\n      for (let value of numbers) {\r\n        if (!isInRow({ grid, row, value }))\r\n          if (!isInCol({ col, grid, value })) {\r\n            const square = identifySquare({ grid, row, col });\r\n            if (!isInSquare({ square, value })) {\r\n              grid[row][col] = value;\r\n              if (checkGrid(grid)) return true;\r\n              else if (fillGrid(grid)) return true;\r\n            }\r\n          }\r\n      }\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n  grid[row][col] = 0;\r\n}\r\n\r\nexport default fillGrid;\r\n","import { GRID, SQUARE } from \"typings\";\r\n\r\ninterface IInput {\r\n  grid: GRID;\r\n  row: number;\r\n  col: number;\r\n}\r\n\r\n/**\r\n * A function that identifies and returns the current square of a given sudoku grid at a row and column index.\r\n * @param input Object with 9X9 Sudoku Grid, row index and col index.\r\n */\r\nfunction identifyWorkingSquare({ col, grid, row }: IInput): SQUARE {\r\n  const square = [];\r\n  if (row < 3) {\r\n    if (col < 3)\r\n      for (let x = 0; x < 3; x++)\r\n        square.push([grid[x][0], grid[x][1], grid[x][2]]);\r\n    else if (col < 6)\r\n      for (let x = 0; x < 3; x++)\r\n        square.push([grid[x][3], grid[x][4], grid[x][5]]);\r\n    else\r\n      for (let x = 0; x < 3; x++)\r\n        square.push([grid[x][6], grid[x][7], grid[x][8]]);\r\n  } else if (row < 6) {\r\n    if (col < 3)\r\n      for (let x = 3; x < 6; x++)\r\n        square.push([grid[x][0], grid[x][1], grid[x][2]]);\r\n    else if (col < 6)\r\n      for (let x = 3; x < 6; x++)\r\n        square.push([grid[x][3], grid[x][4], grid[x][5]]);\r\n    else\r\n      for (let x = 3; x < 6; x++)\r\n        square.push([grid[x][6], grid[x][7], grid[x][8]]);\r\n  } else {\r\n    if (col < 3)\r\n      for (let x = 6; x < 9; x++)\r\n        square.push([grid[x][0], grid[x][1], grid[x][2]]);\r\n    else if (col < 6)\r\n      for (let x = 6; x < 9; x++)\r\n        square.push([grid[x][3], grid[x][4], grid[x][5]]);\r\n    else\r\n      for (let x = 6; x < 9; x++)\r\n        square.push([grid[x][6], grid[x][7], grid[x][8]]);\r\n  }\r\n\r\n  return square as SQUARE;\r\n}\r\n\r\nexport default identifyWorkingSquare;\r\n","import { GRID, NUMBERS } from \"typings\";\r\n\r\ninterface IInput {\r\n  col: number;\r\n  grid: GRID;\r\n  value: NUMBERS;\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid column.\r\n * @param input Object with 9X9 Sudoku Grid, col index and value.\r\n */\r\nfunction isInCol({ col, grid, value }: IInput): boolean {\r\n  for (let i = 0; i < 9; i++) if (value === grid[i][col]) return true;\r\n  return false;\r\n}\r\n\r\nexport default isInCol;\r\n","import { GRID, NUMBERS } from \"typings\";\r\n\r\ninterface IInput {\r\n  grid: GRID;\r\n  row: number;\r\n  value: NUMBERS;\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid row.\r\n * @param input Object with 9X9 Sudoku Grid, row index and value.\r\n */\r\nfunction isInRow({ grid, row, value }: IInput): boolean {\r\n  return grid[row].includes(value);\r\n}\r\n\r\nexport default isInRow;\r\n","import { NUMBERS, SQUARE } from \"typings\";\r\n\r\ninterface IInput {\r\n  square: SQUARE;\r\n  value: NUMBERS;\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid square.\r\n * @param input Object with 3X3 Square and value.\r\n */\r\nfunction isInSquare({ square, value }: IInput): boolean {\r\n  return [...square[0], ...square[1], ...square[2]].includes(value);\r\n}\r\n\r\nexport default isInSquare;\r\n","/**\r\n * An array shuffling function using the Fisher-Yates shuffle algorithm\r\n * @param array An array that you want shuffled\r\n */\r\nfunction shuffle(array: any[]) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n}\r\n\r\nexport default shuffle;\r\n","import { GRID, NUMBERS } from \"typings\";\r\nimport { checkGrid, identifySquare, isInCol, isInRow, isInSquare } from \"utils\";\r\n\r\n/**\r\n * A backtracking/recusrive function to check all possible combinations of numbers until a solution is found\r\n * @param grid A 9X9 array consisting of values from 0-9\r\n */\r\n\r\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\nfunction solveGrid(grid: GRID) {\r\n  let counter = 0;\r\n  let row = 0;\r\n  let col = 0;\r\n\r\n  for (let i = 0; i < 81; i++) {\r\n    row = Math.floor(i / 9);\r\n    col = i % 9;\r\n\r\n    if (grid[row][col] === 0) {\r\n      for (let value of numbers)\r\n        if (!isInRow({ grid, row, value }))\r\n          if (!isInCol({ col, grid, value })) {\r\n            const square = identifySquare({ grid, row, col });\r\n            if (!isInSquare({ square, value })) {\r\n              grid[row][col] = value;\r\n              if (checkGrid(grid)) {\r\n                counter++;\r\n                console.log({ counter });\r\n                break;\r\n              } else if (solveGrid(grid)) return true;\r\n            }\r\n          }\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n  grid[row][col] = 0;\r\n}\r\n\r\nexport default solveGrid;\r\n","import React from \"react\";\r\n\r\nimport { createFullGrid } from \"utils\";\r\n\r\nconst App: React.FC = () => {\r\n  const grid = createFullGrid();\r\n  console.log({ grid });\r\n\r\n  return <div>See console for generated sudoku grid</div>;\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { App, unregister } from \"core\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nunregister();\r\n"],"sourceRoot":""}