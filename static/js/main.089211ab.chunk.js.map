{"version":3,"sources":["modules/grid/actions.ts","utils/check-grid/index.ts","utils/compare-arrays/index.ts","utils/copy-grid/index.ts","utils/create-full-grid/index.ts","utils/fill-grid/index.ts","utils/get-random-index/index.ts","utils/identify-square/index.ts","utils/is-in/col/index.ts","utils/is-in/row/index.ts","utils/is-in/square/index.ts","global/index.ts","utils/remove-numbers/index.ts","utils/shuffle/index.ts","utils/solve-grid/index.ts","modules/grid/reducer.ts","modules/grid/index.ts","components/grid/block/styles/index.ts","components/grid/block/index.tsx","components/grid/styles/index.ts","components/grid/index.tsx","components/numbers/button/styles/index.ts","components/numbers/button/index.tsx","components/numbers/styles/index.ts","components/numbers/index.tsx","components/styles/card/index.ts","components/styles/content/index.ts","components/styles/title/index.ts","modules/index.ts","core/configure-store/index.ts","core/service-worker/index.ts","styles/global.ts","index.tsx","styles/theme.ts","modules/grid/types.ts"],"names":["createFullGrid","type","types","fillBlock","value","coords","selectBlock","checkGrid","grid","i","j","compareArrays","arr1","arr2","Array","isArray","length","len","copyGrid","gridCopy","r","c","fillGrid","numbers","row","col","Math","floor","shuffle","isInRow","isInCol","square","identifySquare","isInSquare","getRandomIndex","random","identifyWorkingSquare","x","push","includes","counter","removeNumbers","attempts","backup","global","solveGrid","array","initialState","reducer","state","action","solvedGrid","copiedGrid","challengeGrid","workingGrid","alert","selectedBlock","Container","styled","div","active","puzzle","theme","css","colors","blue","white","black","transition","lightBlue","Block","colIndex","rowIndex","useSelector","isActive","isPuzzle","solvedValue","dispatch","useDispatch","data-cy","onClick","Row","Grid","selectedValue","create","useCallback","fill","n","useMousetrap","useEffect","Children","toArray","map","_","button","disabled","Button","Numbers","key","Card","Content","Title","h1","combineReducers","configureStore","createStore","devToolsEnhancer","Boolean","window","location","hostname","match","createGlobalStyle","background","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","CREATE_FULL_GRID","FILL_BLOCK","SELECT_BLOCK"],"mappings":"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","file":"static/js/main.089211ab.chunk.js","sourcesContent":["import { Action, AnyAction } from 'redux'\r\n\r\nimport { BLOCK_COORDS, NUMBERS } from 'typings'\r\n\r\nimport * as types from './types'\r\n\r\nexport const createFullGrid = (): Action => ({ type: types.CREATE_FULL_GRID })\r\n\r\nexport const fillBlock = (value: NUMBERS, coords: BLOCK_COORDS): AnyAction => ({\r\n  coords,\r\n  type: types.FILL_BLOCK,\r\n  value,\r\n})\r\n\r\nexport const selectBlock = (coords: BLOCK_COORDS): AnyAction => ({\r\n  coords,\r\n  type: types.SELECT_BLOCK,\r\n})\r\n","import { GRID } from 'typings'\r\n\r\n/**\r\n * A function to check if the grid is full\r\n * @param grid A 9X9 array consisting of values from 0-9\r\n */\r\nfunction checkGrid(grid: GRID): boolean {\r\n  for (let i = 0; i < 9; i++)\r\n    for (let j = 0; j < 9; j++) if (grid[i][j] === 0) return false\r\n\r\n  return true\r\n}\r\n\r\nexport default checkGrid\r\n","/**\r\n * Compares two arrays (of any dimensions) and returns true if they are equal, otherwise returns false\r\n * @param arr1 first array to be compared\r\n * @param arr2 secondar array to be compared\r\n */\r\nfunction compareArrays(arr1: any[], arr2: any[]): boolean {\r\n  if (!Array.isArray(arr1) && !Array.isArray(arr2)) return arr1 === arr2\r\n\r\n  if (arr1.length !== arr2.length) return false\r\n\r\n  for (var i = 0, len = arr1.length; i < len; i++)\r\n    if (!compareArrays(arr1[i], arr2[i])) return false\r\n\r\n  return true\r\n}\r\n\r\nexport default compareArrays\r\n","import { GRID, INDEX } from 'typings'\r\n\r\n/**\r\n * Performs a deep copy on a 9x9 sudoku grid\r\n * @param grid a 9x9 sudoku grid to be copied\r\n */\r\nfunction copyGrid(grid: GRID): GRID {\r\n  const gridCopy: GRID = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ]\r\n  for (let r: INDEX = 0; r < 9; r++) {\r\n    gridCopy[r] = [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    for (let c: INDEX = 0; c < 9; c++) gridCopy[r][c] = grid[r][c]\r\n  }\r\n\r\n  return gridCopy\r\n}\r\n\r\nexport default copyGrid\r\n","import { GRID } from 'typings'\r\nimport { fillGrid } from 'utils'\r\n\r\n/**\r\n * A function to create a full valid sudoku grid\r\n */\r\nfunction createFullGrid(): GRID {\r\n  const grid: GRID = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ]\r\n\r\n  fillGrid(grid)\r\n\r\n  return grid\r\n}\r\n\r\nexport default createFullGrid\r\n","import { GRID, NUMBERS } from 'typings'\r\nimport {\r\n  checkGrid,\r\n  identifySquare,\r\n  shuffle,\r\n  isInCol,\r\n  isInRow,\r\n  isInSquare,\r\n} from 'utils'\r\n\r\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n/**\r\n * A backtracking/recusrive function to check all possible combinations of numbers until a solution is found\r\n * @param grid 9X9 Sudoku Grid\r\n */\r\nfunction fillGrid(grid: GRID) {\r\n  let row = 0\r\n  let col = 0\r\n\r\n  for (let i = 0; i < 81; i++) {\r\n    row = Math.floor(i / 9)\r\n    col = i % 9\r\n\r\n    if (grid[row][col] === 0) {\r\n      shuffle(numbers)\r\n\r\n      for (let value of numbers) {\r\n        if (!isInRow({ grid, row, value }))\r\n          if (!isInCol({ col, grid, value })) {\r\n            const square = identifySquare({ grid, row, col })\r\n            if (!isInSquare({ square, value })) {\r\n              grid[row][col] = value\r\n              if (checkGrid(grid)) return true\r\n              else if (fillGrid(grid)) return true\r\n            }\r\n          }\r\n      }\r\n\r\n      break\r\n    }\r\n  }\r\n\r\n  grid[row][col] = 0\r\n}\r\n\r\nexport default fillGrid\r\n","/**\r\n * Returns a random sudoku grid index in the 0 - 8 range\r\n */\r\nfunction getRandomIndex() {\r\n  return Math.floor(Math.random() * Math.floor(9))\r\n}\r\n\r\nexport default getRandomIndex\r\n","import { GRID, SQUARE } from 'typings'\r\n\r\ninterface IInput {\r\n  grid: GRID\r\n  row: number\r\n  col: number\r\n}\r\n\r\n/**\r\n * A function that identifies and returns the current square of a given sudoku grid at a row and column index.\r\n * @param input Object with 9X9 Sudoku Grid, row index and col index.\r\n */\r\nfunction identifyWorkingSquare({ col, grid, row }: IInput): SQUARE {\r\n  const square = []\r\n  if (row < 3) {\r\n    if (col < 3)\r\n      for (let x = 0; x < 3; x++)\r\n        square.push([grid[x][0], grid[x][1], grid[x][2]])\r\n    else if (col < 6)\r\n      for (let x = 0; x < 3; x++)\r\n        square.push([grid[x][3], grid[x][4], grid[x][5]])\r\n    else\r\n      for (let x = 0; x < 3; x++)\r\n        square.push([grid[x][6], grid[x][7], grid[x][8]])\r\n  } else if (row < 6) {\r\n    if (col < 3)\r\n      for (let x = 3; x < 6; x++)\r\n        square.push([grid[x][0], grid[x][1], grid[x][2]])\r\n    else if (col < 6)\r\n      for (let x = 3; x < 6; x++)\r\n        square.push([grid[x][3], grid[x][4], grid[x][5]])\r\n    else\r\n      for (let x = 3; x < 6; x++)\r\n        square.push([grid[x][6], grid[x][7], grid[x][8]])\r\n  } else {\r\n    if (col < 3)\r\n      for (let x = 6; x < 9; x++)\r\n        square.push([grid[x][0], grid[x][1], grid[x][2]])\r\n    else if (col < 6)\r\n      for (let x = 6; x < 9; x++)\r\n        square.push([grid[x][3], grid[x][4], grid[x][5]])\r\n    else\r\n      for (let x = 6; x < 9; x++)\r\n        square.push([grid[x][6], grid[x][7], grid[x][8]])\r\n  }\r\n\r\n  return square as SQUARE\r\n}\r\n\r\nexport default identifyWorkingSquare\r\n","import { GRID, NUMBERS } from 'typings'\r\n\r\ninterface IInput {\r\n  col: number\r\n  grid: GRID\r\n  value: NUMBERS\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid column.\r\n * @param input Object with 9X9 Sudoku Grid, col index and value.\r\n */\r\nfunction isInCol({ col, grid, value }: IInput): boolean {\r\n  for (let i = 0; i < 9; i++) if (value === grid[i][col]) return true\r\n  return false\r\n}\r\n\r\nexport default isInCol\r\n","import { GRID, NUMBERS } from 'typings'\r\n\r\ninterface IInput {\r\n  grid: GRID\r\n  row: number\r\n  value: NUMBERS\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid row.\r\n * @param input Object with 9X9 Sudoku Grid, row index and value.\r\n */\r\nfunction isInRow({ grid, row, value }: IInput): boolean {\r\n  return grid[row].includes(value)\r\n}\r\n\r\nexport default isInRow\r\n","import { NUMBERS, SQUARE } from 'typings'\r\n\r\ninterface IInput {\r\n  square: SQUARE\r\n  value: NUMBERS\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid square.\r\n * @param input Object with 3X3 Square and value.\r\n */\r\nfunction isInSquare({ square, value }: IInput): boolean {\r\n  return [...square[0], ...square[1], ...square[2]].includes(value)\r\n}\r\n\r\nexport default isInSquare\r\n","export default {\r\n  counter: 0,\r\n}\r\n","import global from 'global'\r\nimport { getRandomIndex, solveGrid, copyGrid } from 'utils'\r\nimport { GRID } from 'typings'\r\n\r\nfunction removeNumbers(grid: GRID, attempts = 5): GRID {\r\n  while (attempts > 0) {\r\n    let row = getRandomIndex()\r\n    let col = getRandomIndex()\r\n\r\n    while (grid[row][col] === 0) {\r\n      row = getRandomIndex()\r\n      col = getRandomIndex()\r\n    }\r\n\r\n    const backup = grid[row][col]\r\n    grid[row][col] = 0\r\n\r\n    const gridCopy = copyGrid(grid)\r\n\r\n    global.counter = 0\r\n    solveGrid(gridCopy)\r\n\r\n    if (global.counter !== 1) {\r\n      grid[row][col] = backup\r\n      attempts -= 1\r\n    }\r\n  }\r\n\r\n  return grid\r\n}\r\n\r\nexport default removeNumbers\r\n","/**\r\n * An array shuffling function using the Fisher-Yates shuffle algorithm\r\n * @param array An array that you want shuffled\r\n */\r\nfunction shuffle(array: any[]) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1))\r\n    ;[array[i], array[j]] = [array[j], array[i]]\r\n  }\r\n}\r\n\r\nexport default shuffle\r\n","import global from 'global'\r\nimport { GRID, NUMBERS } from 'typings'\r\nimport { checkGrid, identifySquare, isInCol, isInRow, isInSquare } from 'utils'\r\n\r\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n/**\r\n * A backtracking/recursive function to check all possible combinations of numbers until a solution is found\r\n * @param grid A 9X9 array consisting of values from 0-9\r\n */\r\nfunction solveGrid(grid: GRID) {\r\n  let row = 0\r\n  let col = 0\r\n\r\n  for (let i = 0; i < 81; i++) {\r\n    row = Math.floor(i / 9)\r\n    col = i % 9\r\n\r\n    if (grid[row][col] === 0) {\r\n      for (let value of numbers)\r\n        if (!isInRow({ grid, row, value }))\r\n          if (!isInCol({ col, grid, value })) {\r\n            const square = identifySquare({ grid, row, col })\r\n            if (!isInSquare({ square, value })) {\r\n              grid[row][col] = value\r\n              if (checkGrid(grid)) {\r\n                global.counter++\r\n                break\r\n              } else if (solveGrid(grid)) return true\r\n            }\r\n          }\r\n      break\r\n    }\r\n  }\r\n\r\n  grid[row][col] = 0\r\n}\r\n\r\nexport default solveGrid\r\n","import { AnyAction } from 'redux'\r\n\r\nimport { copyGrid, createFullGrid, removeNumbers, compareArrays } from 'utils'\r\n\r\nimport * as types from './types'\r\nimport { IReducer } from './interfaces'\r\n\r\nconst initialState: IReducer = {}\r\n\r\nfunction reducer(state = initialState, action: AnyAction): IReducer {\r\n  switch (action.type) {\r\n    case types.CREATE_FULL_GRID: {\r\n      const solvedGrid = createFullGrid()\r\n      const copiedGrid = copyGrid(solvedGrid)\r\n      const challengeGrid = removeNumbers(copiedGrid)\r\n      return {\r\n        ...state,\r\n        challengeGrid,\r\n        solvedGrid,\r\n        workingGrid: copyGrid(challengeGrid),\r\n      }\r\n    }\r\n\r\n    case types.FILL_BLOCK: {\r\n      if (state.workingGrid && state.solvedGrid) {\r\n        if (\r\n          state.solvedGrid[action.coords[0]][action.coords[1]] !== action.value\r\n        ) {\r\n          alert('Incorrect option!')\r\n          return state\r\n        }\r\n        state.workingGrid[action.coords[0]][action.coords[1]] = action.value\r\n        if (compareArrays(state.workingGrid, state.solvedGrid))\r\n          alert('Completed!')\r\n        if (state.workingGrid) return { ...state }\r\n      }\r\n      return state\r\n    }\r\n\r\n    case types.SELECT_BLOCK:\r\n      return { ...state, selectedBlock: action.coords }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer\r\n","import reducer from './reducer'\r\n\r\nexport * from './actions'\r\nexport * from './interfaces'\r\n\r\nexport type IReducer = ReturnType<typeof reducer>\r\nexport default reducer\r\n","import styled, { css } from 'styled-components'\r\n\r\ninterface IProps {\r\n  active?: boolean\r\n  puzzle?: boolean\r\n}\r\n\r\nexport const Container = styled.div<IProps>`\r\n  ${({ active, puzzle, theme }) => css`\r\n    align-items: center;\r\n    background-color: ${active ? theme.colors.blue : theme.colors.white};\r\n    border: solid 1px ${theme.colors.black};\r\n    cursor: pointer;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-shrink: 0;\r\n    flex-basis: 0;\r\n    font-weight: ${puzzle ? 'bold' : 'normal'};\r\n    font-size: 20px;\r\n    height: auto;\r\n    justify-content: center;\r\n    transition: ${theme.transition};\r\n    user-select: none;\r\n\r\n    &:before {\r\n      padding-top: 100%;\r\n      content: '';\r\n      float: left;\r\n    }\r\n\r\n    &:hover {\r\n      background-color: ${theme.colors.lightBlue};\r\n    }\r\n  `}\r\n`\r\n","import React, { FC } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Dispatch, AnyAction } from 'redux'\r\n\r\nimport { IReducer } from 'modules'\r\nimport { N, INDEX } from 'typings'\r\n\r\nimport { Container } from './styles'\r\nimport { selectBlock } from 'modules/grid'\r\n\r\ninterface IProps {\r\n  colIndex: INDEX\r\n  rowIndex: INDEX\r\n}\r\n\r\ninterface IState {\r\n  isActive: boolean\r\n  isPuzzle: boolean\r\n  solvedValue: N\r\n  value: N\r\n}\r\n\r\nconst Block: FC<IProps> = ({ colIndex, rowIndex }) => {\r\n  const state = useSelector<IReducer, IState>(\r\n    ({ grid: { challengeGrid, selectedBlock, solvedGrid, workingGrid } }) => ({\r\n      isActive: selectedBlock\r\n        ? selectedBlock[0] === rowIndex && selectedBlock[1] === colIndex\r\n        : false,\r\n      isPuzzle:\r\n        challengeGrid && challengeGrid[rowIndex][colIndex] !== 0 ? true : false,\r\n      solvedValue: solvedGrid ? solvedGrid[rowIndex][colIndex] : 0,\r\n      value: workingGrid ? workingGrid[rowIndex][colIndex] : 0,\r\n    })\r\n  )\r\n  const dispatch = useDispatch<Dispatch<AnyAction>>()\r\n\r\n  function handleClick() {\r\n    if (!state.isActive) dispatch(selectBlock([rowIndex, colIndex]))\r\n  }\r\n\r\n  return (\r\n    <Container\r\n      active={state.isActive}\r\n      data-cy={`block-container-${rowIndex}-${colIndex}`}\r\n      onClick={handleClick}\r\n      puzzle={state.isPuzzle}\r\n    >\r\n      {state.value === 0 ? '' : state.value}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Block\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nexport const Row = styled.div`\r\n  ${({ theme }) => css`\r\n    display: flex;\r\n    flex-flow: row;\r\n\r\n    &:nth-child(1) {\r\n      div {\r\n        border-top: solid 4px ${theme.colors.black};\r\n      }\r\n    }\r\n    &:nth-child(3),\r\n    &:nth-child(6) {\r\n      div {\r\n        border-bottom: solid 3px ${theme.colors.black};\r\n      }\r\n    }\r\n    &:nth-child(9) {\r\n      border-bottom: solid 4px ${theme.colors.black};\r\n    }\r\n\r\n    div {\r\n      &:nth-child(1) {\r\n        border-left: solid 4px ${theme.colors.black};\r\n      }\r\n      &:nth-child(3),\r\n      &:nth-child(6),\r\n      &:nth-child(9) {\r\n        border-right: solid 4px ${theme.colors.black};\r\n      }\r\n      &:nth-child(4),\r\n      &:nth-child(7) {\r\n        border-left: none;\r\n      }\r\n    }\r\n  `}\r\n`\r\n","import React, { Children, FC, useCallback, useEffect } from 'react'\r\nimport useMousetrap from 'react-hook-mousetrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AnyAction, Dispatch } from 'redux'\r\n\r\nimport { IReducer } from 'modules'\r\nimport { createFullGrid, fillBlock, selectBlock } from 'modules/grid'\r\nimport { BLOCK_COORDS, INDEX, N, NUMBERS } from 'typings'\r\n\r\nimport Block from './block'\r\nimport { Container, Row } from './styles'\r\n\r\ninterface IState {\r\n  selectedBlock?: BLOCK_COORDS\r\n  selectedValue: N\r\n}\r\n\r\nconst Grid: FC = () => {\r\n  const state = useSelector<IReducer, IState>(\r\n    ({ grid: { selectedBlock, workingGrid } }) => ({\r\n      selectedBlock,\r\n      selectedValue:\r\n        workingGrid && selectedBlock\r\n          ? workingGrid[selectedBlock[0]][selectedBlock[1]]\r\n          : 0,\r\n    })\r\n  )\r\n  const dispatch = useDispatch<Dispatch<AnyAction>>()\r\n\r\n  const create = useCallback(() => dispatch(createFullGrid()), [dispatch])\r\n\r\n  const fill = useCallback(\r\n    (n: NUMBERS) => {\r\n      if (state.selectedBlock && state.selectedValue === 0)\r\n        dispatch(fillBlock(n, state.selectedBlock))\r\n    },\r\n    [dispatch, state.selectedBlock, state.selectedValue]\r\n  )\r\n\r\n  function moveDown() {\r\n    if (state.selectedBlock && state.selectedBlock[0] < 8)\r\n      dispatch(\r\n        selectBlock([\r\n          (state.selectedBlock[0] + 1) as INDEX,\r\n          state.selectedBlock[1],\r\n        ])\r\n      )\r\n  }\r\n\r\n  function moveLeft() {\r\n    if (state.selectedBlock && state.selectedBlock[1] > 0)\r\n      dispatch(\r\n        selectBlock([\r\n          state.selectedBlock[0],\r\n          (state.selectedBlock[1] - 1) as INDEX,\r\n        ])\r\n      )\r\n  }\r\n\r\n  function moveRight() {\r\n    if (state.selectedBlock && state.selectedBlock[1] < 8)\r\n      dispatch(\r\n        selectBlock([\r\n          state.selectedBlock[0],\r\n          (state.selectedBlock[1] + 1) as INDEX,\r\n        ])\r\n      )\r\n  }\r\n\r\n  function moveUp() {\r\n    if (state.selectedBlock && state.selectedBlock[0] > 0)\r\n      dispatch(\r\n        selectBlock([\r\n          (state.selectedBlock[0] - 1) as INDEX,\r\n          state.selectedBlock[1],\r\n        ])\r\n      )\r\n  }\r\n\r\n  useMousetrap(['1'], () => fill(1))\r\n  useMousetrap(['2'], () => fill(2))\r\n  useMousetrap(['3'], () => fill(3))\r\n  useMousetrap(['4'], () => fill(4))\r\n  useMousetrap(['5'], () => fill(5))\r\n  useMousetrap(['6'], () => fill(6))\r\n  useMousetrap(['7'], () => fill(7))\r\n  useMousetrap(['8'], () => fill(8))\r\n  useMousetrap(['9'], () => fill(9))\r\n  useMousetrap('down', moveDown)\r\n  useMousetrap('left', moveLeft)\r\n  useMousetrap('right', moveRight)\r\n  useMousetrap('up', moveUp)\r\n\r\n  useEffect(() => {\r\n    create()\r\n  }, [create])\r\n\r\n  return (\r\n    <Container data-cy=\"grid-container\">\r\n      {Children.toArray(\r\n        [...Array(9)].map((_, rowIndex) => (\r\n          <Row data-cy=\"grid-row-container\">\r\n            {Children.toArray(\r\n              [...Array(9)].map((_, colIndex) => (\r\n                <Block\r\n                  colIndex={colIndex as INDEX}\r\n                  rowIndex={rowIndex as INDEX}\r\n                />\r\n              ))\r\n            )}\r\n          </Row>\r\n        ))\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Grid\r\n","import styled, { css } from 'styled-components'\r\n\r\ninterface IProps {\r\n  disabled?: boolean\r\n}\r\n\r\nexport const Container = styled.button<IProps>`\r\n  ${({ disabled, theme }) => css`\r\n    align-items: center;\r\n    background-color: ${theme.colors.black};\r\n    border: 2px solid ${theme.colors.black};\r\n    border-radius: 4px;\r\n    box-shadow: ;\r\n    color: ${theme.colors.white};\r\n    cursor: pointer;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-shrink: 0;\r\n    flex-basis: 0;\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    height: auto;\r\n    justify-content: center;\r\n    margin: 4px 2px;\r\n    opacity: 0.9;\r\n    transition: ${theme.transition};\r\n    width: 24px;\r\n\r\n    &:before {\r\n      padding-top: 100%;\r\n      content: '';\r\n      float: left;\r\n    }\r\n\r\n    &:focus {\r\n      border-color: ${theme.colors.blue};\r\n      outline: none;\r\n    }\r\n\r\n    &:hover {\r\n      opacity: 0.6;\r\n    }\r\n\r\n    ${disabled &&\r\n      css`\r\n        opacity: 0.4;\r\n        pointer-events: none;\r\n      `}\r\n  `}\r\n`\r\n","import React, { FC, useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AnyAction, Dispatch } from 'redux'\r\n\r\nimport { IReducer } from 'modules'\r\nimport { fillBlock } from 'modules/grid'\r\nimport { BLOCK_COORDS, N, NUMBERS } from 'typings'\r\n\r\nimport { Container } from './styles'\r\n\r\ninterface IProps {\r\n  value: NUMBERS\r\n}\r\n\r\ninterface IState {\r\n  selectedBlock?: BLOCK_COORDS\r\n  selectedValue: N\r\n}\r\n\r\nconst Button: FC<IProps> = ({ value }) => {\r\n  const state = useSelector<IReducer, IState>(\r\n    ({ grid: { selectedBlock, workingGrid } }) => ({\r\n      selectedBlock,\r\n      selectedValue:\r\n        workingGrid && selectedBlock\r\n          ? workingGrid[selectedBlock[0]][selectedBlock[1]]\r\n          : 0,\r\n    })\r\n  )\r\n  const dispatch = useDispatch<Dispatch<AnyAction>>()\r\n\r\n  const fill = useCallback(() => {\r\n    if (state.selectedBlock && state.selectedValue === 0)\r\n      dispatch(fillBlock(value, state.selectedBlock))\r\n  }, [dispatch, state.selectedBlock, state.selectedValue, value])\r\n\r\n  return <Container onClick={fill}>{value}</Container>\r\n}\r\n\r\nexport default Button\r\n","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-flow: row;\r\n`\r\n","import React, { FC } from 'react'\r\n\r\nimport { NUMBERS } from 'typings'\r\n\r\nimport Button from './button'\r\nimport { Container } from './styles'\r\n\r\nconst Numbers: FC = () => (\r\n  <Container>\r\n    {([1, 2, 3, 4, 5, 6, 7, 8, 9] as NUMBERS[]).map(value => (\r\n      <Button key={value} value={value} />\r\n    ))}\r\n  </Container>\r\n)\r\n\r\nexport default Numbers\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const Card = styled.div`\r\n  ${({ theme }) => css`\r\n    background-color: ${theme.colors.white};\r\n    border-radius: 15px;\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: column;\r\n    max-height: fit-content;\r\n    padding: 15px;\r\n  `}\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const Content = styled.div`\r\n  max-width: 500px;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const Title = styled.h1`\r\n  ${({ theme }) => css`\r\n    color: ${theme.colors.white};\r\n    text-align: center;\r\n    margin-top: 0;\r\n  `}\r\n`\r\n","import { combineReducers } from 'redux'\r\n\r\nimport grid from './grid'\r\n\r\nconst reducer = combineReducers({ grid })\r\n\r\nexport type IReducer = ReturnType<typeof reducer>\r\nexport default reducer\r\n","import { createStore } from 'redux'\r\nimport { devToolsEnhancer } from 'redux-devtools-extension'\r\n\r\nimport reducer from 'modules'\r\n\r\nfunction configureStore(initialState = {}) {\r\n  return createStore(reducer, initialState, devToolsEnhancer({}))\r\n}\r\n\r\nexport default configureStore\r\n","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    window.location.hostname === '[::1]' ||\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) return\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        navigator.serviceWorker.ready.then(() =>\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        )\r\n      } else registerValidSW(swUrl, config)\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) return\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              if (config && config.onUpdate) config.onUpdate(registration)\r\n            } else {\r\n              console.log('Content is cached for offline use.')\r\n\r\n              if (config && config.onSuccess) config.onSuccess(registration)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error =>\r\n      console.error('Error during service worker registration:', error)\r\n    )\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  fetch(swUrl, { headers: { 'Service-Worker': 'script' } })\r\n    .then(response => {\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      )\r\n        navigator.serviceWorker.ready.then(registration =>\r\n          registration.unregister().then(() => window.location.reload())\r\n        )\r\n      else registerValidSW(swUrl, config)\r\n    })\r\n    .catch(() =>\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    )\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator)\r\n    navigator.serviceWorker.ready.then(registration =>\r\n      registration.unregister()\r\n    )\r\n}\r\n","import { createGlobalStyle, css } from 'styled-components'\r\n\r\nexport default createGlobalStyle`\r\n  ${({ theme }) => css`\r\n    html {\r\n      height: 100%;\r\n\r\n      body {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 100%;\r\n        margin: 0;\r\n\r\n        #root {\r\n          background: ${theme.colors.background};\r\n          color: ${theme.colors.black};\r\n          display: flex;\r\n          font-family: sans-serif;\r\n          height: 100%;\r\n          justify-content: center;\r\n          padding: 15px;\r\n        }\r\n      }\r\n    }\r\n  `}\r\n`\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { ThemeProvider } from 'styled-components'\r\n\r\nimport { Card, Content, Grid, Numbers, Title } from 'components'\r\nimport { configureStore, unregister } from 'core'\r\nimport { GlobalStyles, theme } from 'styles'\r\n\r\nconst store = configureStore()\r\n\r\nReactDOM.render(\r\n  <ThemeProvider theme={theme}>\r\n    <GlobalStyles />\r\n    <Provider store={store}>\r\n      <Content data-cy=\"content\">\r\n        <Title data-cy=\"title\">Sudoku</Title>\r\n        <Card data-cy=\"card\">\r\n          <Grid />\r\n          <Numbers />\r\n        </Card>\r\n      </Content>\r\n    </Provider>\r\n  </ThemeProvider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nunregister()\r\n","export default {\r\n  colors: {\r\n    background: 'radial-gradient(#282C34CC, #282C34)',\r\n    black: '#282C34',\r\n    blue: '#A0E9FD',\r\n    lightBlue: '#CAF3FE',\r\n    white: 'white',\r\n  },\r\n  transition: '0.3s',\r\n}\r\n","export const CREATE_FULL_GRID = 'CREATE_FULL_GRID'\r\nexport const FILL_BLOCK = 'FILL_BLOCK'\r\nexport const SELECT_BLOCK = 'SELECT_BLOCK'\r\n"],"sourceRoot":""}